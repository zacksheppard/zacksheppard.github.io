<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wordpress | io.zack.io]]></title>
  <link href="http://io.zack.io/blog/categories/wordpress/atom.xml" rel="self"/>
  <link href="http://io.zack.io/"/>
  <updated>2017-04-12T12:43:24-04:00</updated>
  <id>http://io.zack.io/</id>
  <author>
    <name><![CDATA[Zack Sheppard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WordPress as a Backend Data Store Using the WP REST API]]></title>
    <link href="http://io.zack.io/blog/2017/04/10/wordpress-data-store-with-the-rest-api/"/>
    <updated>2017-04-10T15:08:56-04:00</updated>
    <id>http://io.zack.io/blog/2017/04/10/wordpress-data-store-with-the-rest-api</id>
    <content type="html"><![CDATA[<p>I&rsquo;m just starting to experiment with the <a href="http://v2.wp-api.org/">WP REST API</a> and it has the potential to make WordPress be the backend for my non-WordPress coding projects.</p>

<p>For <a href="http://zack.pizza">zack.pizza</a> I can <a href="https://wordpress.org/plugins/custom-post-type-ui/">make a new post type</a> of Pizza, give it any fields I want and add more as needed, then make a small project to call that data and push it to GitHub Pages. I&rsquo;m enjoying using WordPress as the database because it makes use of some of my favorite things about WordPress,</p>

<ul>
<li>Open source</li>
<li>I own my own data (I could hook up to the Foursquare API but then they own my checkins not me)</li>
<li>It leverages the WordPress admin dashboard to manage the data. This point is probably the most important since WordPress has a mature editor with a focus on content managment.</li>
</ul>


<p>Setting up a database for a new coding project is always annoying and slows down getting to the fun part of using the data to create the app/bot/site. With WordPress and a couple plugins like <a href="https://wordpress.org/plugins/custom-post-type-ui/">Custom Post Types UI</a> to create the pizza post type and <a href="https://wordpress.org/plugins/advanced-custom-fields/">Advanced Custom Fields</a> it&rsquo;s quick and easy to make the new data type and then add, edit, delete, and rename fields. If the project expands and needs something more robust than WordPress, I know exactly how the data should be modeled when making a stand alone solution. That ability to easily experiment and change the data is also really important when setting a project up.</p>

<p><img src="/images/earworm_screenshot.png" alt="Earworm screenhot" /></p>

<p>I already added another post type to simply list the songs that get stuck in my head. If I start singing some tune to myself I make a new post in &lsquo;Earworm&rsquo;, add the name and a link in the &lsquo;YouTube&rsquo; field. I don&rsquo;t know exactly how I&rsquo;ll use the data yet. Maybe a module on my blog, graph it by genre, add a field for lyrics, or link to the genuis music API. But now that the data is there in a form I can see and not just in a data store I&rsquo;ll rarely look at, it&rsquo;s making me ancy to get to work and do something with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Layout in the WordPress Twenty Sixteen Theme]]></title>
    <link href="http://io.zack.io/blog/2017/03/28/layout-in-the-wordpress-twenty-sixteen-theme/"/>
    <updated>2017-03-28T17:15:40-04:00</updated>
    <id>http://io.zack.io/blog/2017/03/28/layout-in-the-wordpress-twenty-sixteen-theme</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to make some changes to a child theme of the WordPress <a href="https://theme.wordpress.com/themes/twentysixteen/">Twenty Sixteen theme</a>. It&rsquo;s currently one of my favorite starting points when theming in WordPress. It is simple but not plain, the border and strong headlines have a good modern look, and it doesn&rsquo;t look like everyting else right now so it won&rsquo;t go out of style in a couple years.</p>

<p>Making changes or additions to a WordPress theme is often difficult because there is a lot going on with how the elements work together to create the layout. I&rsquo;m going to do what I should probably have been doing in the past, take a couple hours to really understand all the elements, what they are doing and how they work together so working with the theme is less of a fight.</p>

<p>This post is a bit of an experiment. I&rsquo;ll list out divs that you&rsquo;ll come across when inspecting the page and explain how they affect layout. This mimicks the process I went through when figuring out how the theme works.</p>

<h2>Layout by element</h2>

<p>Note: I&rsquo;m using a bulleted list to show each element and nested bullets will describe what you need to know about it <em>and</em> list nested elements inside of it. I&rsquo;m not 100% sold on this presentation since it doesn&rsquo;t let me easily include blocks of code but it&rsquo;s a good first try at documenting the information. It is useful to inspect a Twenty Sixteen page and use this guide in another window as it explains how the elements work together.</p>

<p><strong>tl;dr</strong>
Margins are controlled by percentage in this theme. <code>.site-content</code> is the main container. <code>.content-area</code> width changes depending on if there is a sidebar.</p>

<ul>
<li><code>body</code></li>
<li>The theme has a border on all sides of the browser window. The border is the body itself on the sides; there are body::before and body::after elements that are position: fixed that make the border at the top and bottom.

<ul>
<li><code>.site</code>

<ul>
<li>Margins on .site show the body and create the border.</li>
<li><code>.site-inner</code>

<ul>
<li>It has a max-width of 1320px that constrains the layout so it doesn&rsquo;t expand forever.</li>
<li><code>.header</code>

<ul>
<li>Header layout uses flex box.</li>
<li>It has padding set in percentage, which changes with screensize and sets its layout dimensions inside .site-inner</li>
<li><code>.site-content</code>

<ul>
<li>This is the main content container (as in the content of pages and posts). All posts and pages are in here.</li>
<li>It has side padding set in percentage. This is the main padding for the content inside the border</li>
<li><code>.content-area</code>

<ul>
<li>This is the content area for articles and a sidebar if you have one.</li>
<li>Twenty Sixteen has an optional sidebar. If you have no sidebar it has .no-sidebar and a width of 100% (100% of .site-content). If there is a .sidebar, width is 70%</li>
<li><code>.sidebar</code>

<ul>
<li>If a sidebar is enabled, it is width: 25%</li>
</ul>
</li>
<li><code>.site-main</code> &amp; <code>.site-main &gt; article</code>

<ul>
<li>These have bottom margin but no other layout rules that we need to worry about.</li>
<li><code>.entry-header</code>

<ul>
<li>The margins for .entry-header and .entry-content line up to create the article.</li>
<li>Side margins here start to constrain content to create the article shape. Margins are in % and change via min-width media queries.</li>
<li>If you were going to change the article width, you&rsquo;d change the margin percentages on .entry-header, .entry-summary, and .entry-content.</li>
</ul>
</li>
<li><code>.entry-summary</code>

<ul>
<li>Same side margin rules as .enry-content and .entry-header (the margins for all 3 of these are declared in the same rule)</li>
</ul>
</li>
<li><code>.post-thumbnail</code>

<ul>
<li>This is the Featured Image. It will show at up to 1200px. It isn&rsquo;t constrained by the .entry-content margins which is what allows it to overhang an article. It&rsquo;s limit is .site-content.</li>
</ul>
</li>
<li><code>.entry-content</code>

<ul>
<li><em>This is where the real complication is.</em> If you are working with a post or a page, this is where the content will go. .entry-content and the div that follows it, .entry-footer are float: left. In the mobile view, the footer is below the content. In the desktop view they are still both floated left with the footer technically after the content. But the margins are moved around so the footer appears to be before the content.</li>
<li>To break this down, for .site-content, If the window is <code>&gt; 61.5625em</code>  &amp; <code>article:not(.type-page)</code>; <code>float: left;</code> (both this and .entry-footer float left); <code>margin-right: -100%;</code> (this pulls .entry-footer to the left, aligning it with the title)
<code>margin-left: 34.99999999%;</code> (this creates the space on the left of the content for the footer)
<code>width: 50.00000001%;</code> (50% of .site-content)</li>
<li><code>img.below-entry-meta</code> for images larger than 840px

<ul>
<li>Images in the post wider than or equal to 840px overhang the column. They will have a .size-full class but this isn&rsquo;t what applies the style.</li>
<li>.below-entry-meta has the css rules <code>margin-left: -40%; max-width: 140%</code>. Again we are using percentage to set layout.</li>
<li>This overhang is only applied > 61em (removing that one style gets rid of the overhang)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>After doing this explication of the layout, creating the testimonials shortcode was much easier than other changes I&rsquo;ve made. It&rsquo;s epecially handy since this particular theme has things lining up in weird ways so it&rsquo;s hard to tell how they work together. The above notes will also be useful for my next changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spend Less Time Searching the WordPress Dashboard Menu]]></title>
    <link href="http://io.zack.io/blog/2017/02/12/spend-less-time-searching-the-wordpress-dashboard-menu/"/>
    <updated>2017-02-12T10:21:21-05:00</updated>
    <id>http://io.zack.io/blog/2017/02/12/spend-less-time-searching-the-wordpress-dashboard-menu</id>
    <content type="html"><![CDATA[<p>&ldquo;Where is that button?&rdquo;</p>

<p>That is what I most often think when looking at the WordPress dashboard menu and an experience I want to minimize for clients I&rsquo;m handing a site off to. Because of that I usually make a few changes so it will be more natural for them to scan and find what they need.</p>

<h3>Main menu order</h3>

<p>The default menu has a lot of items and the order isn&rsquo;t obvious to someone new to WordPress, especially if you start adding custom post types.</p>

<p>I think of the menu items as separated into 4 different categories and place them into these categories and put a seperator between each group.</p>

<ul>
<li>Admin home &ndash; Dashboard</li>
<li>Edit content &ndash; Post types &amp; pages. &lsquo;Posts&rsquo; I rename to the more specific &lsquo;Blog Posts&rsquo;</li>
<li>Community &ndash; Areas where you will interact with site visitors. Contact form, email contacts, etc.</li>
<li>Settings &ndash; This includes appearance and tools</li>
<li>Plugins &ndash; Plugins are big offenders of making the admin menu more confusing. There isn&rsquo;t any consistency to where they get added. They might show up before, after, or in Settings; so putting them together is helpful.</li>
</ul>


<p>Making the changes: There are two different ways you can move items around in the menu, <a href="https://code.tutsplus.com/articles/customizing-the-wordpress-admin-adding-styling--wp-33530">code them directly</a> or use the excellent <a href="https://wordpress.org/plugins/admin-menu-editor/">Admin Menu Editor plugin</a>.</p>

<h3>Separator Styling</h3>

<p>Now that we have the menu items grouped into a logical order we need to make it more visually obvious they are in a group. The default separator styling just makes a slightly larger vertical space with no color difference. It&rsquo;s so minimal new users can be forgiven for not noticing it.</p>

<p>I like to simply make it a grey background just like the main dashboard background color. This one change makes it much more obvious there is a seperator.</p>

<p>```</p>

<h1>adminmenu li.wp-menu-separator {</h1>

<p>background-color: #f1f1f1;
}
```</p>

<h3>Limit access by role</h3>

<p>Authors and Editors see a lot of menu items they don&rsquo;t really need. An easy way to make the menu easier to sift through is just to remove items that an Author or Editor won&rsquo;t need. Ones I remove are:</p>

<ul>
<li>Appearance</li>
<li>Tools (I actually remove this for everyone)</li>
<li>Plugins</li>
<li>Any installed plugin that an Author or Editor doesn&rsquo;t need</li>
</ul>


<p>With these minimal changes you can make it easier for users to find what they need and shorten the onboarding time for new users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Local Development on a WordPress Blog at Dreamhost]]></title>
    <link href="http://io.zack.io/blog/2016/06/18/setting-up-local-development-on-a-wordpress-blog-at-dreamhost/"/>
    <updated>2016-06-18T17:11:41-04:00</updated>
    <id>http://io.zack.io/blog/2016/06/18/setting-up-local-development-on-a-wordpress-blog-at-dreamhost</id>
    <content type="html"><![CDATA[<p>We will be working with a Mac running MAMP and a Dreamhost account running a 1-click install of WordPress.</p>

<h2>Basic Overview</h2>

<p>To run WordPress on Dreamhost, locally on your Mac there are a few things you&rsquo;ll need to do:</p>

<ul>
<li>Setup a web server

<ul>
<li>A web server like Apache or Nginx must be installed and running. The server &lsquo;listens&rsquo; for http requests so that when you go to <a href="http://localhost,">http://localhost,</a> the server responds.</li>
<li>All servers have a &lsquo;web root&rsquo; or &lsquo;document root&rsquo; directory. When it gets an http request, it loads the files in this directory. (In our case, that&rsquo;s where we&rsquo;ll put the WordPress files.)</li>
</ul>
</li>
<li>Setup a database server and the database.

<ul>
<li>Things to know

<ul>
<li>There are different types of databases, Postgres, mySQL, and others.</li>
<li>It&rsquo;s important to understand that the &lsquo;database&rsquo; is basically just a file with information. The &lsquo;database server&rsquo; knows how to read this file and it knows how to talk to the web server so it can show on the page.The difference between a database and a database server can be confusing because even though they are seperate parts, the terms are used interchangeably. We&rsquo;ll use Excel as an analogy to try and help with this confusion.</li>
</ul>
</li>
<li>Steps to setup. WordPress uses a mySQL server so that&rsquo;s what we&rsquo;ll setup here.

<ul>
<li>Install a MySQL server. (If you want to view an Excel spreadsheet .xls file, you first have to install Excel.)</li>
<li>Start up the MySQL server and leave it running (Open Excel)</li>
<li>Now the server is running, but we also need to create a database locally. (This is where the Excel analogy starts to fall apart a little. In the Excel example, a .xls file is self-contained with the info we need. In a database, we need to create a database that is ready to have data added. Then we will import that data into the database.)</li>
<li>Now that the database is created, to import we do a data dump from the original database, and then export it to this one. (This is analogous to copying and pasting into a spreadsheet, but more complicated.)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Install the web server and SQL server using MAMP</h2>

<p>To run WordPress locally we will need to setup MAMP. (My Apache &ndash; MySQL &ndash; PHP) So in installing this we will install the web server and SQL server at the same time. You just download and install a copy from <a href="http://mamp.info">MAMP</a></p>

<p>Things to note:</p>

<ul>
<li><em>Preferences > Web Server</em> has a document root (aka the web root folder where files for websites are kept) that defaults to <code>/Applications/MAMP/htdocs</code> This is where you will place your files. So if your WordPress folder is /myWebSite and you place it at <code>/Applications/MAMP/htdocs/myWebSite</code> after everything is setup you can view it at <a href="http://localhost/myWebSite">http://localhost/myWebSite</a>

<ul>
<li>You can change that to some other web root if you like. All of my projects are in a folder called /code and I&rsquo;d rather work out of there but don&rsquo;t want to make all of /code public so I like to create a symlink in htdocs to the project that will be served out of htdocs, but we will continue the tutorial assuming you want to place the files in htdocs.</li>
<li>htdocs is a standard name for the public folder where website files are located. It will have permissions set so it is accessible to the web.

<ul>
<li>htdocs etymology is &lsquo;HyperText Documents&rsquo;</li>
<li>The name of the web root folder is different in different systems. Other names for the folder you might see are www and public_html.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Download the WordPress files</h2>

<p>For most website hosts you&rsquo;ll use FTP to download the files. If you&rsquo;re not sure how to use FTP, start by searching the help docs for your website host. That is usually the best place to find out how to login to your particular website host, how to connect to their FTP, and it will often have information on FTP clients.</p>

<p>After you&rsquo;ve downloaded your WordPress site folder, place it in htdocs.</p>

<p>Now we have the files but not the database so let&rsquo;s go get that.</p>

<p>[the config file?]</p>

<h2>Export your database</h2>

<p>Your website host will probably have phpMyAdmin which is &ldquo;A tool written in PHP intended to handle the administration of MySQL over the WWW.&rdquo; Login to that to do the export of your data. Again, if you&rsquo;re not sure how, your hosts help docs will be the best place to look.</p>

<p>You&rsquo;ll need the database name, username, password, and hostname. You should see most of this in your web host panel (also known as cPanel) but you can also find some of this in the wp-config.php file which will be in the WordPress files you downloaded.</p>

<p>After you are logged in:</p>

<ul>
<li>Click on the database you want to export</li>
<li>Click the &lsquo;Export&rsquo; tab at the top of the screen</li>
<li>phpMyAdmin will give you the option of a quick or custom export method. I  recommend custom method. Choose zip as the compression method but leave all the other options as they are and click &lsquo;Go&rsquo; to download your database.</li>
</ul>


<p>We now have all the parts we need from the host!</p>

<h2>Start up the web server and SQL server</h2>

<p>This is pretty easy. Just open MAMP and hit Start Servers.</p>

<h2>Import the database</h2>

<p>After MAMP is started you can administer your databases at <a href="http://localhost/phpmyadmin/">http://localhost/phpmyadmin/</a></p>

<p>As of this writing, the default username and password is username: root, password: root</p>

<p>After you&rsquo;re logged into phpMyAdmin:</p>

<ul>
<li>Click Databases and create a new database using a descriptive name so that when you look at your databases later, you&rsquo;ll know what this is for. (I&rsquo;m using my site name)</li>
<li>After creating the database you should be on it&rsquo;s page. You&rsquo;ll know because there will be breadcrumb navigation showing the database name &ldquo;Server: localhost:3306 »Database: mysite&rdquo;. (phpMyAdmin can be confusing so make sure you see this.) From the database page, click &ldquo;Import&rdquo;</li>
<li>On the import page choose the .sql.zip file we created before and import this file. When it&rsquo;s all done you will see a success message.</li>
</ul>


<h2>Update settings for your new host</h2>

<p>All the parts are there but there are a couple steps left. There are some WordPress settings that reference the domain name. Since the domain is now localhost and not your actual domain, we&rsquo;ll need to update these.</p>

<h3>Update entries in the database</h3>

<p>Some WordPress settings that reference the domain name are in the database. Because we&rsquo;re working on localhost and not mydomain.com, we&rsquo;ll have to update these. To update all of them using SQL,</p>

<ul>
<li>Select your WordPress database in phpMyAdmin and go to the &lsquo;SQL&rsquo; tab</li>
<li>Enter the following query, replacing &lsquo;<a href="http://mydomain.com">http://mydomain.com</a>&rsquo; with your domain and &lsquo;<a href="http://localhost/mydomain-com">http://localhost/mydomain-com</a>&rsquo; with your localhost URL.</li>
</ul>


<p>```mysql
UPDATE wp_options SET option_value = replace(option_value, &lsquo;<a href="http://mydomain.com">http://mydomain.com</a>&rsquo;, &lsquo;<a href="http://localhost/mydomain-com">http://localhost/mydomain-com</a>&rsquo;) WHERE option_name = &lsquo;home&rsquo; OR option_name = &lsquo;siteurl&rsquo;;</p>

<p>UPDATE wp_posts SET post_content = replace(post_content, &lsquo;<a href="http://mydomain.com">http://mydomain.com</a>&rsquo;, &lsquo;<a href="http://localhost/mydomain-com">http://localhost/mydomain-com</a>&rsquo;);</p>

<p>UPDATE wp_postmeta SET meta_value = replace(meta_value,&lsquo;<a href="http://mydomain.com">http://mydomain.com</a>&rsquo;,&lsquo;<a href="http://localhost/mydomain-com">http://localhost/mydomain-com</a>&rsquo;);
```</p>

<ul>
<li>wp_options, wp_posts, and wp_postmeta are tables in the database. If you get an error that the tables aren&rsquo;t found, check the database itself for the table names. Sometimes WordPress is setup giving these table names prefixes. If they are different just change the table name in the SQL statement to match the actual tables.</li>
</ul>


<h3>Update the WordPress config file</h3>

<p>We&rsquo;re almost done! Next, we&rsquo;re going to update the wp-config.php file so it has the correct database information.</p>

<p>```php
/<strong> The name of the database for WordPress */
define(&lsquo;DB_NAME&rsquo;, &lsquo;database_name_here&rsquo;);
/</strong> MySQL database username */
define(&lsquo;DB_USER&rsquo;, &lsquo;username_here&rsquo;);</p>

<p>/<em>* MySQL database password </em>/
define(&lsquo;DB_PASSWORD&rsquo;, &lsquo;password_here&rsquo;);
```</p>

<p>Set the MySQL username as your local mysql username, usually the default is <code>root</code>. If you have set password for mySQL user root on your localhost, then enter that password. (The default password should be <code>root</code> on a MAMP install) Otherwise leave it empty and save your changes.</p>

<p>If you&rsquo;re unsure of the MySQL password it can be a pain to change. Instead of giving instructions here, check out the current MAMP docs.</p>

<p>After the config change is made you&rsquo;re site should now be live at <a href="http://localhost/mysite">http://localhost/mysite</a></p>
]]></content>
  </entry>
  
</feed>
