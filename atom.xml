<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[io.zack.io]]></title>
  <link href="http://io.zack.io/atom.xml" rel="self"/>
  <link href="http://io.zack.io/"/>
  <updated>2017-04-11T17:03:53-04:00</updated>
  <id>http://io.zack.io/</id>
  <author>
    <name><![CDATA[Zack Sheppard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fun With the WordPress REST API]]></title>
    <link href="http://io.zack.io/blog/2017/04/10/fun-with-the-wordpress-rest-api/"/>
    <updated>2017-04-10T15:08:56-04:00</updated>
    <id>http://io.zack.io/blog/2017/04/10/fun-with-the-wordpress-rest-api</id>
    <content type="html"><![CDATA[<p>I&rsquo;m just starting to experiment with the <a href="http://v2.wp-api.org/">WP REST API</a> and it has the potential to make WordPress be the backend for non-WordPress  coding projects.</p>

<p>For <a href="http://zack.pizza">zack.pizza</a> I can <a href="https://wordpress.org/plugins/custom-post-type-ui/">make a new post type</a> of Pizza, give it any fields I want and add more as needed, then make a small project to call that data and push it to GitHub Pages. I&rsquo;m enjoying using WordPress as the database because it makes use of some of my favorite things about WordPress,</p>

<ul>
<li>Open source</li>
<li>I own my own data (I could hook up to the Foursquare API but then they own my checkins not me)</li>
<li>It leverages the WordPress admin dashboard to manage the data. This point is probably the most important since WordPress has a mature editor with a focus on content managment.</li>
</ul>


<p>Setting up a database for a new coding project is always annoying and slows down getting to the fun part of using the data to create the app/bot/site. With WordPress and a couple plugins like <a href="https://wordpress.org/plugins/custom-post-type-ui/">Custom Post Types UI</a> to create the pizza post type and <a href="https://wordpress.org/plugins/advanced-custom-fields/">Advanced Custom Fields</a> it&rsquo;s quick and easy to make the new data type and then add, edit, delete, and rename fields. If the project expands and needs something more robust than WordPress, I know exactly how the data should be modeled when making a stand alone solution. That ability to easily experiment and change the data is also really important when setting a project up.</p>

<p><img src="http://io.zack.io/images/earworm_screenshot.png" alt="Earworm screenhot" /></p>

<p>I already added another post type to simply list the songs that get stuck in my head. If I start singing some tune to myself I make a new post in &lsquo;Earworm&rsquo;, add the name and a link in the &lsquo;YouTube&rsquo; field. I don&rsquo;t know exactly how I&rsquo;ll use the data yet. Maybe a module on my blog, graph it by genre, add a field for lyrics, or link to the genuis music API. But now that the data is there in a form I can see and not just in a data store I&rsquo;ll rarely look at, it&rsquo;s making me ancy to get to work and do something with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Layout in the WordPress Twenty Sixteen Theme]]></title>
    <link href="http://io.zack.io/blog/2017/03/28/layout-in-the-wordpress-twenty-sixteen-theme/"/>
    <updated>2017-03-28T17:15:40-04:00</updated>
    <id>http://io.zack.io/blog/2017/03/28/layout-in-the-wordpress-twenty-sixteen-theme</id>
    <content type="html"><![CDATA[<p>I&rsquo;m going to make some changes to a child theme of the WordPress <a href="https://theme.wordpress.com/themes/twentysixteen/">Twenty Sixteen theme</a>. It&rsquo;s currently one of my favorite starting points when theming in WordPress. It is simple but not plain, the border and strong headlines have a good modern look, and it doesn&rsquo;t look like everyting else right now so it won&rsquo;t go out of style in a couple years.</p>

<p>Making changes or additions to a WordPress theme is often difficult because there is a lot going on with how the elements work together to create the layout. I&rsquo;m going to do what I should probably have been doing in the past, take a couple hours to really understand all the elements, what they are doing and how they work together so working with the theme is less of a fight.</p>

<p>This post is a bit of an experiment. I&rsquo;ll list out divs that you&rsquo;ll come across when inspecting the page and explain how they affect layout. This mimicks the process I went through when figuring out how the theme works.</p>

<h2>Layout by element</h2>

<p>Note: I&rsquo;m using a bulleted list to show each element and nested bullets will describe what you need to know about it <em>and</em> list nested elements inside of it. I&rsquo;m not 100% sold on this presentation since it doesn&rsquo;t let me easily include blocks of code but it&rsquo;s a good first try at documenting the information. It is useful to inspect a Twenty Sixteen page and use this guide in another window as it explains how the elements work together.</p>

<p><strong>tl;dr</strong>
Margins are controlled by percentage in this theme. <code>.site-content</code> is the main container. <code>.content-area</code> width changes depending on if there is a sidebar.</p>

<ul>
<li><code>body</code></li>
<li>The theme has a border on all sides of the browser window. The border is the body itself on the sides; there are body::before and body::after elements that are position: fixed that make the border at the top and bottom.

<ul>
<li><code>.site</code>

<ul>
<li>Margins on .site show the body and create the border.</li>
<li><code>.site-inner</code>

<ul>
<li>It has a max-width of 1320px that constrains the layout so it doesn&rsquo;t expand forever.</li>
<li><code>.header</code>

<ul>
<li>Header layout uses flex box.</li>
<li>It has padding set in percentage, which changes with screensize and sets its layout dimensions inside .site-inner</li>
<li><code>.site-content</code>

<ul>
<li>This is the main content container (as in the content of pages and posts). All posts and pages are in here.</li>
<li>It has side padding set in percentage. This is the main padding for the content inside the border</li>
<li><code>.content-area</code>

<ul>
<li>This is the content area for articles and a sidebar if you have one.</li>
<li>Twenty Sixteen has an optional sidebar. If you have no sidebar it has .no-sidebar and a width of 100% (100% of .site-content). If there is a .sidebar, width is 70%</li>
<li><code>.sidebar</code>

<ul>
<li>If a sidebar is enabled, it is width: 25%</li>
</ul>
</li>
<li><code>.site-main</code> &amp; <code>.site-main &gt; article</code>

<ul>
<li>These have bottom margin but no other layout rules that we need to worry about.</li>
<li><code>.entry-header</code>

<ul>
<li>The margins for .entry-header and .entry-content line up to create the article.</li>
<li>Side margins here start to constrain content to create the article shape. Margins are in % and change via min-width media queries.</li>
<li>If you were going to change the article width, you&rsquo;d change the margin percentages on .entry-header, .entry-summary, and .entry-content.</li>
</ul>
</li>
<li><code>.entry-summary</code>

<ul>
<li>Same side margin rules as .enry-content and .entry-header (the margins for all 3 of these are declared in the same rule)</li>
</ul>
</li>
<li><code>.post-thumbnail</code>

<ul>
<li>This is the Featured Image. It will show at up to 1200px. It isn&rsquo;t constrained by the .entry-content margins which is what allows it to overhang an article. It&rsquo;s limit is .site-content.</li>
</ul>
</li>
<li><code>.entry-content</code>

<ul>
<li><em>This is where the real complication is.</em> If you are working with a post or a page, this is where the content will go. .entry-content and the div that follows it, .entry-footer are float: left. In the mobile view, the footer is below the content. In the desktop view they are still both floated left with the footer technically after the content. But the margins are moved around so the footer appears to be before the content.</li>
<li>To break this down, for .site-content, If the window is <code>&gt; 61.5625em</code>  &amp; <code>article:not(.type-page)</code>; <code>float: left;</code> (both this and .entry-footer float left); <code>margin-right: -100%;</code> (this pulls .entry-footer to the left, aligning it with the title)
<code>margin-left: 34.99999999%;</code> (this creates the space on the left of the content for the footer)
<code>width: 50.00000001%;</code> (50% of .site-content)</li>
<li><code>img.below-entry-meta</code> for images larger than 840px

<ul>
<li>Images in the post wider than or equal to 840px overhang the column. They will have a .size-full class but this isn&rsquo;t what applies the style.</li>
<li>.below-entry-meta has the css rules <code>margin-left: -40%; max-width: 140%</code>. Again we are using percentage to set layout.</li>
<li>This overhang is only applied > 61em (removing that one style gets rid of the overhang)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>After doing this explication of the layout, creating the testimonials shortcode was much easier than other changes I&rsquo;ve made. It&rsquo;s epecially handy since this particular theme has things lining up in weird ways so it&rsquo;s hard to tell how they work together. The above notes will also be useful for my next changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Local Development on a WordPress Blog at Dreamhost]]></title>
    <link href="http://io.zack.io/blog/2016/06/18/setting-up-local-development-on-a-wordpress-blog-at-dreamhost/"/>
    <updated>2016-06-18T17:11:41-04:00</updated>
    <id>http://io.zack.io/blog/2016/06/18/setting-up-local-development-on-a-wordpress-blog-at-dreamhost</id>
    <content type="html"><![CDATA[<p>We will be working with a Mac running MAMP and a Dreamhost account running a 1-click install of WordPress.</p>

<h2>Basic Overview</h2>

<p>To run WordPress on Dreamhost, locally on your Mac there are a few things you&rsquo;ll need to do:</p>

<ul>
<li>Setup a web server

<ul>
<li>A web server like Apache or Nginx must be installed and running. The server &lsquo;listens&rsquo; for http requests so that when you go to <a href="http://localhost,">http://localhost,</a> the server responds.</li>
<li>All servers have a &lsquo;web root&rsquo; or &lsquo;document root&rsquo; directory. When it gets an http request, it loads the files in this directory. (In our case, that&rsquo;s where we&rsquo;ll put the WordPress files.)</li>
</ul>
</li>
<li>Setup a database server and the database.

<ul>
<li>Things to know

<ul>
<li>There are different types of databases, Postgres, mySQL, and others.</li>
<li>It&rsquo;s important to understand that the &lsquo;database&rsquo; is basically just a file with information. The &lsquo;database server&rsquo; knows how to read this file and it knows how to talk to the web server so it can show on the page.The difference between a database and a database server can be confusing because even though they are seperate parts, the terms are used interchangeably. We&rsquo;ll use Excel as an analogy to try and help with this confusion.</li>
</ul>
</li>
<li>Steps to setup. WordPress uses a mySQL server so that&rsquo;s what we&rsquo;ll setup here.

<ul>
<li>Install a MySQL server. (If you want to view an Excel spreadsheet .xls file, you first have to install Excel.)</li>
<li>Start up the MySQL server and leave it running (Open Excel)</li>
<li>Now the server is running, but we also need to create a database locally. (This is where the Excel analogy starts to fall apart a little. In the Excel example, a .xls file is self-contained with the info we need. In a database, we need to create a database that is ready to have data added. Then we will import that data into the database.)</li>
<li>Now that the database is created, to import we do a data dump from the original database, and then export it to this one. (This is analogous to copying and pasting into a spreadsheet, but more complicated.)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Install the web server and SQL server using MAMP</h2>

<p>To run WordPress locally we will need to setup MAMP. (My Apache &ndash; MySQL &ndash; PHP) So in installing this we will install the web server and SQL server at the same time. You just download and install a copy from <a href="http://mamp.info">MAMP</a></p>

<p>Things to note:</p>

<ul>
<li><em>Preferences > Web Server</em> has a document root (aka the web root folder where files for websites are kept) that defaults to <code>/Applications/MAMP/htdocs</code> This is where you will place your files. So if your WordPress folder is /myWebSite and you place it at <code>/Applications/MAMP/htdocs/myWebSite</code> after everything is setup you can view it at <a href="http://localhost/myWebSite">http://localhost/myWebSite</a>

<ul>
<li>You can change that to some other web root if you like. All of my projects are in a folder called /code and I&rsquo;d rather work out of there but don&rsquo;t want to make all of /code public so I like to create a symlink in htdocs to the project that will be served out of htdocs, but we will continue the tutorial assuming you want to place the files in htdocs.</li>
<li>htdocs is a standard name for the public folder where website files are located. It will have permissions set so it is accessible to the web.

<ul>
<li>htdocs etymology is &lsquo;HyperText Documents&rsquo;</li>
<li>The name of the web root folder is different in different systems. Other names for the folder you might see are www and public_html.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Download the WordPress files</h2>

<p>For most website hosts you&rsquo;ll use FTP to download the files. If you&rsquo;re not sure how to use FTP, start by searching the help docs for your website host. That is usually the best place to find out how to login to your particular website host, how to connect to their FTP, and it will often have information on FTP clients.</p>

<p>After you&rsquo;ve downloaded your WordPress site folder, place it in htdocs.</p>

<p>Now we have the files but not the database so let&rsquo;s go get that.</p>

<p>[the config file?]</p>

<h2>Export your database</h2>

<p>Your website host will probably have phpMyAdmin which is &ldquo;A tool written in PHP intended to handle the administration of MySQL over the WWW.&rdquo; Login to that to do the export of your data. Again, if you&rsquo;re not sure how, your hosts help docs will be the best place to look.</p>

<p>You&rsquo;ll need the database name, username, password, and hostname. You should see most of this in your web host panel (also known as cPanel) but you can also find some of this in the wp-config.php file which will be in the WordPress files you downloaded.</p>

<p>After you are logged in:</p>

<ul>
<li>Click on the database you want to export</li>
<li>Click the &lsquo;Export&rsquo; tab at the top of the screen</li>
<li>phpMyAdmin will give you the option of a quick or custom export method. I  recommend custom method. Choose zip as the compression method but leave all the other options as they are and click &lsquo;Go&rsquo; to download your database.</li>
</ul>


<p>We now have all the parts we need from the host!</p>

<h2>Start up the web server and SQL server</h2>

<p>This is pretty easy. Just open MAMP and hit Start Servers.</p>

<h2>Import the database</h2>

<p>After MAMP is started you can administer your databases at <a href="http://localhost/phpmyadmin/">http://localhost/phpmyadmin/</a></p>

<p>As of this writing, the default username and password is username: root, password: root</p>

<p>After you&rsquo;re logged into phpMyAdmin:</p>

<ul>
<li>Click Databases and create a new database using a descriptive name so that when you look at your databases later, you&rsquo;ll know what this is for. (I&rsquo;m using my site name)</li>
<li>After creating the database you should be on it&rsquo;s page. You&rsquo;ll know because there will be breadcrumb navigation showing the database name &ldquo;Server: localhost:3306 »Database: mysite&rdquo;. (phpMyAdmin can be confusing so make sure you see this.) From the database page, click &ldquo;Import&rdquo;</li>
<li>On the import page choose the .sql.zip file we created before and import this file. When it&rsquo;s all done you will see a success message.</li>
</ul>


<h2>Update settings for your new host</h2>

<p>All the parts are there but there are a couple steps left. There are some WordPress settings that reference the domain name. Since the domain is now localhost and not your actual domain, we&rsquo;ll need to update these.</p>

<h3>Update entries in the database</h3>

<p>Some WordPress settings that reference the domain name are in the database. Because we&rsquo;re working on localhost and not mydomain.com, we&rsquo;ll have to update these. To update all of them using SQL,</p>

<ul>
<li>Select your WordPress database in phpMyAdmin and go to the &lsquo;SQL&rsquo; tab</li>
<li>Enter the following query, replacing &lsquo;<a href="http://mydomain.com">http://mydomain.com</a>&rsquo; with your domain and &lsquo;<a href="http://localhost/mydomain-com">http://localhost/mydomain-com</a>&rsquo; with your localhost URL.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">UPDATE</span> <span class="n">wp_options</span> <span class="kt">SET</span> <span class="n">option_value</span> <span class="o">=</span> <span class="k">replace</span><span class="p">(</span><span class="n">option_value</span><span class="p">,</span> <span class="s1">&#39;http://mydomain.com&#39;</span><span class="p">,</span> <span class="s1">&#39;http://localhost/mydomain-com&#39;</span><span class="p">)</span> <span class="k">WHERE</span> <span class="n">option_name</span> <span class="o">=</span> <span class="s1">&#39;home&#39;</span> <span class="k">OR</span> <span class="n">option_name</span> <span class="o">=</span> <span class="s1">&#39;siteurl&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">wp_posts</span> <span class="kt">SET</span> <span class="n">post_content</span> <span class="o">=</span> <span class="k">replace</span><span class="p">(</span><span class="n">post_content</span><span class="p">,</span> <span class="s1">&#39;http://mydomain.com&#39;</span><span class="p">,</span> <span class="s1">&#39;http://localhost/mydomain-com&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">wp_postmeta</span> <span class="kt">SET</span> <span class="n">meta_value</span> <span class="o">=</span> <span class="k">replace</span><span class="p">(</span><span class="n">meta_value</span><span class="p">,</span><span class="s1">&#39;http://mydomain.com&#39;</span><span class="p">,</span><span class="s1">&#39;http://localhost/mydomain-com&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>wp_options, wp_posts, and wp_postmeta are tables in the database. If you get an error that the tables aren&rsquo;t found, check the database itself for the table names. Sometimes WordPress is setup giving these table names prefixes. If they are different just change the table name in the SQL statement to match the actual tables.</li>
</ul>


<h3>Update the WordPress config file</h3>

<p>We&rsquo;re almost done! Next, we&rsquo;re going to update the wp-config.php file so it has the correct database information.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/** The name of the database for WordPress */</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_NAME&#39;</span><span class="p">,</span> <span class="s1">&#39;database_name_here&#39;</span><span class="p">);</span>
</span><span class='line'><span class="sd">/** MySQL database username */</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_USER&#39;</span><span class="p">,</span> <span class="s1">&#39;username_here&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/** MySQL database password */</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;DB_PASSWORD&#39;</span><span class="p">,</span> <span class="s1">&#39;password_here&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set the MySQL username as your local mysql username, usually the default is <code>root</code>. If you have set password for mySQL user root on your localhost, then enter that password. (The default password should be <code>root</code> on a MAMP install) Otherwise leave it empty and save your changes.</p>

<p>If you&rsquo;re unsure of the MySQL password it can be a pain to change. Instead of giving instructions here, check out the current MAMP docs.</p>

<p>After the config change is made you&rsquo;re site should now be live at <a href="http://localhost/mysite">http://localhost/mysite</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Saving User Data in the Hubot Redis Brain]]></title>
    <link href="http://io.zack.io/blog/2015/06/07/saving-user-data-in-the-hubot-redis-brain/"/>
    <updated>2015-06-07T13:38:18-04:00</updated>
    <id>http://io.zack.io/blog/2015/06/07/saving-user-data-in-the-hubot-redis-brain</id>
    <content type="html"><![CDATA[<p>This is a quick tutorial about saving user data in the Hubot Redis brain using the Slack adapter.</p>

<p>There is documentation out there about the <a href="https://github.com/hubot-scripts/hubot-redis-brain">hubot-redis-brain</a>, about <a href="http://redis.io/commands">redis commands</a>, and the <a href="https://github.com/slackhq/hubot-slack">Hubot slack adapter</a>, but very little mention of how to use them all together.</p>

<p>I&rsquo;m writing a couple hubot scripts that need to save data about a user but want to know if there is already built to handle this. Does hubot have built in commands to access and save data? If so how is the data stored? How does this work with the Slack adapter? What is the unique identifier? In looking for answers to these questions I learned a little about Hubot, redis, and Slack.</p>

<h2>Before starting</h2>

<ul>
<li>If you don&rsquo;t have Hubot installed, we&rsquo;ll be using the Slack adapter in this example so start with <a href="the%20instructions%20on%20the%20slack-hubot%20adapter">https://github.com/slackhq/hubot-slack</a>.</li>
<li>If there is a Hubot you&rsquo;re already working with make sure that the <a href="hubot-redis-brain">https://github.com/hubot-scripts/hubot-redis-brain</a> and <a href="slack-bot">https://github.com/slackhq/hubot-slack</a> packages are installed.</li>
</ul>


<p>You&rsquo;ll also need to configure the Hubot integration in Slack. In Slack Click the team name > Configure Integrations > Hubot. After configuring it you&rsquo;ll be given an API token which you&rsquo;ll need for Heroku and for local testing.</p>

<h4>Troubleshooting notes</h4>

<h2>robot.brain</h2>

<p>Hubot has an &ldquo;<em><a href="https://github.com/github/hubot/blob/master/docs/scripting.md#persistence"> in-memory key-value store</a> exposed as robot.brain that can be used to store and retrieve data by scripts.</em>&rdquo; Since it is only in-memory it really isn&rsquo;t persistent. When hubot restarts, all that data will be gone. That&rsquo;s where <a href="https://github.com/hubot-scripts/hubot-redis-brain">hubot-redis-brain</a> comes in. Because <code>robot-brain</code> it&rsquo;s just a Redis instance, you can use all of the <a href="http://redis.io/commands">Redis commands</a> for getting setting, etc.</p>

<h2>robot.brain.users</h2>

<p>The brain has  users object with a key of users and a key value pair for each user. At a minimum <a href="https://github.com/github/hubot/blob/d1f5e1445b6d70a940b64f289c7fc7d0270dee72/src/user.coffee">hubot sets an ID</a>. Other adapters and scripts may set additional key value pairs.</p>

<p>The hubot methods for looking up users are <code>userForName</code>, <code>userForId</code>, <code>userForFuzzyName</code>, and <code>usersForFuzzyName</code>.</p>

<h2>robot.brain.users &amp; slack</h2>

<p>This is a sample of the users object when using the slack adapter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;users&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;1&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Shell&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;room&quot;</span><span class="o">:</span> <span class="s2">&quot;Shell&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;A12B3CDE4&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;email_address&quot;</span><span class="o">:</span> <span class="s2">&quot;example@zack.io&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;A12B3CDE4&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;jane&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;real_name&quot;</span><span class="o">:</span> <span class="s2">&quot;Jane Smith&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;room&quot;</span><span class="o">:</span> <span class="s2">&quot;general&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;A12H7OYG4&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;A12H7OYG4&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;hubot&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;real_name&quot;</span><span class="o">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;USLACKBOT&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;email_address&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;USLACKBOT&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;slackbot&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;real_name&quot;</span><span class="o">:</span> <span class="s2">&quot;slackbot&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see there are 2 Hubots, and one real person in the room. Now we know that the ID is set based on the Slack user id so we can use this to save additional information.</p>

<h2>Resources</h2>

<ul>
<li><a href="https://github.com/karlseguin/the-little-redis-book/blob/master/en/redis.md">The Little Redis Book</a> It&rsquo;s available for free on ePub. Kindle doesn&rsquo;t support ePub but you can easily import it into iBooks</li>
<li><a href="https://github.com/uglide/RedisDesktopManager/wiki/Quick-Start#connect-to-local-or-public-redis-server">Redis Desktop Manager</a></li>
<li><a href="https://github.com/github/hubot/blob/master/docs/scripting.md">Hubot Scripting Guide</a> and the section on Persistence](<a href="https://github.com/github/hubot/blob/master/docs/scripting.md#persistence">https://github.com/github/hubot/blob/master/docs/scripting.md#persistence</a>)</li>
<li><a href=""></a></li>
<li><a href=""></a></li>
<li><a href=""></a></li>
<li><a href=""></a></li>
</ul>


<h3>Scripts that helped by example</h3>

<ul>
<li><a href="https://github.com/hubot-scripts/hubot-standup-alarm/blob/master/scripts/standup.js">Standup alarm</a></li>
<li><a href="https://github.com/anroots/hubot-simple-phonebook/blob/master/src/simple-phonebook.coffee">Simple phonebook</a></li>
</ul>


<h3>Source code</h3>

<ul>
<li><a href="https://github.com/github/hubot/blob/402af1db05c070dbe59967bfe83a9c8e759598aa/src/brain.coffee">Hubot brain.coffee</a></li>
<li><a href="https://github.com/github/hubot/blob/d1f5e1445b6d70a940b64f289c7fc7d0270dee72/src/user.coffee">Hubot user.coffee</a></li>
<li><a href="https://github.com/github/hubot/blob/39681ea35de6375154748418e11f533ef51c3340/src/adapter.coffee">Hubot adapter.coffee</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on the Cooper Hewitt Pen:1 Week Later]]></title>
    <link href="http://io.zack.io/blog/2015/05/26/thoughts-on-the-cooper-hewitt-pen-1-week-later/"/>
    <updated>2015-05-26T07:43:56-04:00</updated>
    <id>http://io.zack.io/blog/2015/05/26/thoughts-on-the-cooper-hewitt-pen-1-week-later</id>
    <content type="html"><![CDATA[<p>About a week ago, I went to the <a href="http://www.cooperhewitt.org/">Cooper Hewitt</a> to try the experience of visiting with their new <a href="http://www.cooperhewitt.org/2015/03/05/using-the-pen/">Pen</a>, designed in house by their technology team.</p>

<h3>Using the Pen</h3>

<p>It felt very natural and the highest compliment is that after figuring it&rsquo;s main functions, a stylus for the tables and saving items, it just gets out of the way. I am one of those people that takes photos of signage and objects themselves and when I get home I&rsquo;ll write some notes or maybe put them in an Evernote folder of inspiration. This let me not worry about all that cruft and just enjoy the item while I&rsquo;m in front of it.</p>

<p>After using it for about an hour my friend <a href="http://www.aaronland.info/">Aaron Straup Cope</a> who <a href="http://www.cooperhewitt.org/new-experience/designing-pen/">co-designed the pen</a> with <a href="http://www.sebchan.com/">Seb Chan</a></p>

<p>At home, I logged on to Cooper Hewitt&rsquo;s site to retrieve <a href="https://collection.cooperhewitt.org/users/zackshp/visits/fcmy/">my visit</a> and it was very easy and fun to revisit all the items I saved.</p>

<p><img src="https://farm8.staticflickr.com/7759/18047707351_3ae52098ee_o.png" alt="Cooper Hewitt Visit Screen shot" /></p>

<h3>A week later</h3>

<p>The thing I didn&rsquo;t expect is that a week later I found myself still visiting my visit page. It&rsquo;s easy to view one or five. The conversational tone of the site helps make it a nice cozy place to hang out and it&rsquo;s that combination of human and tech that I really enjoyed.</p>

<p>From the object visit page,</p>

<blockquote><p>&ldquo;You collected Textile (Netherlands), 2012 during a visit to the museum on May 15, 2015.&rdquo;</p></blockquote>

<p>From the object page,</p>

<blockquote><p>&ldquo;Some of the people involved with this object include Nico Verbart (Designer) and Vlisco (Manufacturer)&rdquo;</p></blockquote>

<p>As great as the pen is it&rsquo;s the experience around the pen that really completes the new experience. I&rsquo;m excited to go back and create another visit. (and maybe some more <a href="https://collection.cooperhewitt.org/users/zackshp/visits/fcmy/5047767/">wallpaper</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing Leading and Trailing Spaces and &amp;nbsp in Ruby]]></title>
    <link href="http://io.zack.io/blog/2014/10/17/removing-leading-and-trailing-spaces-and-and-nbsp-in-ruby/"/>
    <updated>2014-10-17T15:46:09-04:00</updated>
    <id>http://io.zack.io/blog/2014/10/17/removing-leading-and-trailing-spaces-and-and-nbsp-in-ruby</id>
    <content type="html"><![CDATA[<h4>tl;dr</h4>

<ul>
<li>If <code>.strip</code> isn&rsquo;t working, try <code>.gsub(/\A[[:space:]]+|[[:space:]]+\z/, '')</code></li>
<li>The POSIX space character class <code>[:space:]</code> matches tab(\t) , line feed, form feed(\f), carriage return(\r), and space. In Unicode, it also matches no-break spaces (&amp;nbsp), next line, and the variable-width spaces. Because new lines and &amp;nbsp are sometimes used for ad hoc spacing <code>[:space]</code> is very useful to strip all these out when scraping.</li>
</ul>


<hr />

<p>For a recent project, I needed to scrape a set of pages on a site with  inconsistent html, punctuation, and spacing. One of the challenges was getting rid of leading and trailing white spaces.</p>

<p>Ruby has a <code>.strip</code> method that does exactly this but it wasn&rsquo;t working consistently. (It&rsquo;s also worth nothing that there are lesser known <code>.lstrip</code> and <code>.rstrip</code> methods which remove left (leading) and right (trailing) white space on a string.)</p>

<p>After some investigation I figured out that there was a non-breaking space in some of the strings. This didn&rsquo;t show when viewing the source or in the pry console:</p>

<figure class='code'><figcaption><span>HTML source view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">align=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span> First sentence <span class="nt">&lt;br</span> <span class="nt">/&gt;</span> Next line<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>pry console with Nokogiri</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span><span class="o">&gt;</span> <span class="n">doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.leading-0&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">children</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot; First sentence &quot;</span>
</span><span class='line'><span class="n">pry</span><span class="o">&gt;</span> <span class="n">doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.leading-0&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">children</span><span class="o">[</span><span class="mi">4</span><span class="o">].</span><span class="n">to_s</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot; Next line&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However it did show in the browser inspect console.</p>

<figure class='code'><figcaption><span>Crome inspect </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">align=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>&quot;Location:&quot;
</span><span class='line'><span class="nt">&lt;br&gt;</span>
</span><span class='line'>&quot; First sentence<span class="ni">&amp;nbsp;</span>&quot;
</span><span class='line'><span class="nt">&lt;br&gt;</span>
</span><span class='line'>&quot; Next line&quot;
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trying to gsub the characters out with <code>.gsub(/\&amp;nbsp\;/, '')</code> didn&rsquo;t work. But after some googling I found the <a href="http://en.wikipedia.org/wiki/Regular_expression#POSIX_basic_and_extended">POSIX</a> space character class and was able to remove all leading and trailing spaces with this gsub:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">gsub</span><span class="p">(</span><span class="sr">/\A[[:space:]]+|[[:space:]]+\z/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This matches start of string <code>\A</code> and any white space character or <code>|</code> end of string <code>\A</code> and then any white space character.</p>

<p>It was a particularly good find for this project because the pages I&rsquo;m scraping are littered with spaces, multiple &lsquo;\n&rsquo;s and &rsquo;\r&rsquo;s. <code>[:space]</code> gets rid of all of them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sieve of Eratosthenes]]></title>
    <link href="http://io.zack.io/blog/2014/09/30/sieve-of-eratosthenes/"/>
    <updated>2014-09-30T15:48:16-04:00</updated>
    <id>http://io.zack.io/blog/2014/09/30/sieve-of-eratosthenes</id>
    <content type="html"><![CDATA[<p>In working on <a href="https://projecteuler.net">Project Euler</a>&rsquo;s &lsquo;<a href="https://projecteuler.net/problem=3">Largest prime factor</a>&rsquo; problem I wanted a better way to find primes in a range than brute force testing each number. After a little research I found the  &ldquo;Sieve of Eratosthenes&rdquo;. (What a great name.)</p>

<p>The idea is instead of iterating through each number in a range and testing if it&rsquo;s prime, when you find a prime, remove all of it&rsquo;s multiples from the range, then continue iterating. So in the 1-100 example, finding 2 lets you get rid of 49 possibilities (all the evens except for 2) and finding 3 lets you eleminate 32 more. So almost right away you&rsquo;ve gone from iterating through 100 possibilities to 19.</p>

<p>It&rsquo;s one of the most efficient ways to find prime numbers up to about 10,000,000 according to <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Wikipedia</a> and a couple other sources I found.</p>

<p>Ruby&rsquo;s <code>Prime</code> class has an <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/prime/rdoc/Prime/EratosthenesGenerator.html">Eratosthenes Generator</a> which you can use to, well, generate prime numbers of course.</p>

<figure class='code'><figcaption><span>Sample use of an EratosthenesGenerator in IRB </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span> <span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;Prime&#39;</span>
</span><span class='line'><span class="n">irb</span> <span class="o">&gt;</span> <span class="n">prime_generator</span> <span class="o">=</span> <span class="no">Prime</span><span class="o">::</span><span class="no">EratosthenesGenerator</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Prime::EratosthenesGenerator:0x000001011aaa20 @last_prime_index=-1, @ubound=nil&gt;</span>
</span><span class='line'><span class="n">irb</span> <span class="o">&gt;</span> <span class="n">primes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">irb</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'><span class="n">irb</span> <span class="o">&gt;</span>   <span class="n">primes</span> <span class="o">&lt;&lt;</span> <span class="n">prime_generator</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'><span class="n">irb</span> <span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">29</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because I want to better understand ol&#8217; Eratosthenes and I need a range of primes between x and y, I wrote my own method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;prime&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">eratosthenes_sieve</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">num</span><span class="si">}</span><span class="s2"> is too big a number for eratosthenes_sieve. Please enter a number under 10000000.&quot;</span> <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">9999999</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;2 is the first prime number. Please enter a number of 2 or greater.&quot;</span> <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">range</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.num</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>  <span class="n">range</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">number</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'>      <span class="c1"># puts &quot;#{number} is prime&quot;</span>
</span><span class='line'>      <span class="n">range</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">p</span> <span class="o">%</span> <span class="n">number</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nb">p</span> <span class="o">&gt;</span> <span class="n">number</span>
</span><span class='line'>          <span class="n">range</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="c1"># puts &quot;Deleting #{p}&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">range</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple notes:</p>

<ul>
<li>This includes a <code>raise</code> in case someone tries to use it with too big a number. Above that number the sieve isn&rsquo;t as efficient and the process would run for a long time taking up a lot of memory.</li>
<li>With a large number it can take a while so there are 2 <code>puts</code> statements that can be commented out to watch it work.</li>
</ul>


<p>I think it could be more efficient so I&rsquo;m going to work on improving it in the next couple weeks. Having a prime generator seems pretty handy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cinch IRC Bot Setup]]></title>
    <link href="http://io.zack.io/blog/2014/08/18/cinch-irc-bot-setup/"/>
    <updated>2014-08-18T21:05:22-04:00</updated>
    <id>http://io.zack.io/blog/2014/08/18/cinch-irc-bot-setup</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been wanting to setup an IRC bot for a while and finally got a chance last weekend. It was both free and easy to do using the Ruby <a href="https://github.com/cinchrb/cinch">Cinch</a> bot framework, Heroku for hosting, and Freenode for the room.  Here&rsquo;s how you can make your own little bot friend as well.</p>

<p>Before getting started, if you don&rsquo;t already have an IRC channel to use it on, follow the instructions in <a href="http://io.zack.io/blog/2014/07/21/getting-familiar-with-irc/">getting started with IRC</a> to set one up. You can make a room for anything.</p>

<h3>Creating the basic bot</h3>

<p>We&rsquo;re going to use Github and Heroku so <a href="https://help.github.com/articles/create-a-repo">setup a Git repository and clone it locally</a>.</p>

<p>Next we&rsquo;ll setup the bot. We will start with a very simple bot that just replies to &lsquo;!hello&rsquo; and then give resources on how to add more features after that.</p>

<p>The bot itself only needs a few files and thanks to Cinch they can all be in the root directory of the app.</p>

<figure class='code'><figcaption><span>/Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;cinch&#39;</span>
</span><span class='line'><span class="c1"># There are also Cinch plugins that you can add here later</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/bot.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This is the actual bot config and command logic </span>
</span><span class='line'><span class="c1">#! /usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;cinch&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">bot</span> <span class="o">=</span> <span class="no">Cinch</span><span class="o">::</span><span class="no">Bot</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="s1">&#39;irc.freenode.net&#39;</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="s1">&#39;BotName&#39;</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="n">nick</span> <span class="o">=</span> <span class="s1">&#39;BotName&#39;</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="n">realname</span> <span class="o">=</span> <span class="s1">&#39;My Bot&#39;</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="n">channels</span> <span class="o">=</span> <span class="s1">&#39;#your-channel-name&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">on</span> <span class="ss">:message</span><span class="p">,</span> <span class="s2">&quot;!hello&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="n">reply</span> <span class="s2">&quot;Why hello there.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bot</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This can literally be empty, but you need to have the file.</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>/Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Here we will specify commands for Heroku to start the bot.</span>
</span><span class='line'><span class="ss">web</span><span class="p">:</span> <span class="n">echo</span> <span class="s2">&quot;foobar&quot;</span> <span class="o">&gt;</span> <span class="sr">/dev/nu</span><span class="n">ll</span>
</span><span class='line'><span class="ss">bot</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">ruby</span> <span class="n">bot</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deploy to Heroku</h3>

<p>Next push it up to Heroku and start it up with these commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku create
</span><span class='line'>git push heroku master
</span><span class='line'>heroku scale <span class="nv">web</span><span class="o">=</span>0
</span><span class='line'>heroku scale <span class="nv">bot</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>Now if you type &lsquo;!hello&rsquo; into your IRC channel the bot should reply!</p>

<h3>Creating commands for the bot</h3>

<h4>(aka, what can I do with this?)</h4>

<iframe src="//giphy.com/embed/AMxICdfT4DeCI" width="500" height="350" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>Now that you have a working bot that accepts input and gives output back, you can have it do all kinds of things. It&rsquo;s great for work related things or just for having fun. It could make snarky replies to words said in the channel, play games, lookup information on the web, talk to APIs, whatever you want. We&rsquo;re in the internet of things now! Make it tell you when there&rsquo;s a new pot of coffee or when you&rsquo;re roommate is stealing your Ice Cream.</p>

<p>Here are a few resources to give you some ideas:</p>

<ul>
<li><a href="http://rubydoc.info/gems/cinch/frames">Cinch API docs</a></li>
<li><a href="https://github.com/cinchrb/cinch/tree/master/examples">Examples on Cinch project</a></li>
<li><a href="https://github.com/Bluebot/Bluebot">Other</a> <a href="https://github.com/ta/bishop">Cinchbots</a> on <a href="https://github.com/search?l=Ruby&amp;q=cinch&amp;type=Repositories&amp;utf8=%E2%9C%93">Github</a></li>
<li><a href="https://github.com/Quintus/cinch-plugins">Quintus Cinch plugin collection</a></li>
<li>A few <a href="https://rubygems.org/search?utf8=%E2%9C%93&amp;query=cinch">plugins on Rubygems.org</a></li>
<li>Github released their IRC bot <a href="https://hubot.github.com/">Hubot</a> for anyone to use. It&rsquo;s not written in Ruby but has a lot of parts plugins to  give you ideas for what you&rsquo;ll want your bot to do. You can see a big list of Hubot plugins <a href="https://github.com/github/hubot-scripts/tree/master/src/scripts">here</a>. Everything from &ldquo;<em>Tell Hubot to send a user a message right now !</em>&rdquo; to &ldquo;<em>Fetches an image of the Mint Plaza Blue Bottle Line.</em>&rdquo;</li>
</ul>


<p>Lastly, this post is about the fun things you can do with good ol&#8217; IRC. But if you want to have fun with chat and want to play with something a little more current check out the <a href="https://api.slack.com/">Slack API</a>. <a href="https://slack.com/">Slack</a> is wonderful, the API can do tons, and just like Derek Zoolander, it&rsquo;s so hot right now.</p>

<p>Thanks to <a href="https://github.com/davidboy">davidboy</a> for his <a href="https://github.com/davidboy/herokubot">example app</a> that got me started building this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building the Sunset Somewhere App]]></title>
    <link href="http://io.zack.io/blog/2014/08/04/sunset-somewhere-app/"/>
    <updated>2014-08-04T21:05:29-04:00</updated>
    <id>http://io.zack.io/blog/2014/08/04/sunset-somewhere-app</id>
    <content type="html"><![CDATA[<p><a href="http://sunsetsomewhere.herokuapp.com/">Sunset Somewhere</a> is a web app that <a href="https://github.com/mmlkrx" target="_blank">Matthias Loker</a>, <a href="https://github.com/amyrjohnson" target="_blank">Amy Johnson</a> and I built at <a href="http://flatironschool.com" target="_blank">The Flatiron School</a>. The idea is to show a big beautiful photo of a place where the sun is setting right now. It doesn’t aim to show you a sunset taking place at this moment but instead shows a photo of a place where it is currenlty setting, but which was taken in the past.</p>

<h3>So where is the sun setting?</h3>

<p>We started by finding a way to figure out where the sun sets around the world. Because of the <a href="http://en.wikipedia.org/wiki/Earth's_rotation#Changes_in_rotation">axial tilt of the earth</a> the sunset makes it’s own <a href="http://www.timeanddate.com/worldclock/sunearth.html">constantly moving curve across the planet</a> that doesn&rsquo;t follow a longitude or any other path but it&rsquo;s own. (As we all should.)</p>

<p>There are tools to find out where the sun sets at a specific latitude and longitude but not one to show you all the places it is currently setting. So to get locations, we use a list of the 1000 most populous cities and query the <a href="http://www.wunderground.com/weather/api">Weather Underground API</a> every 4 days to get sunset times in those cities. We used the most populous cities because they would be more likely to have photos.</p>

<p><a href='http://www.timeanddate.com/worldclock/sunearth.html'><img src='https://farm3.staticflickr.com/2905/14645566377_3d48aa75e9_b.jpg'></a></p>

<h3>Finding photos</h3>

<p>We knew we wanted to show big beautiful photos so we chose to use the <a href="http://flickr.com/services/api">Flickr API</a>. Instagram has more photos but they don’t store photos at full size as originally shot or anywhere near the resolution we wanted. The Flickr API has lots of options to let you search for photos including three different ways to search by location, bounding box, <a href="https://developer.yahoo.com/geo/geoplanet/guide/concepts.html">woe-id</a>, or a latitude, longitude, and radius. We went with lat/lon because it was a good match for the city sunset time data which also has a lat/lon.</p>

<p>To search for the photos, we used the <a href="https://www.flickr.com/services/api/flickr.photos.search.html">photos.search</a> method. Flickr has lots of API calls you can make but this is the main search. It has lots of options and can be used in conjunction with other API calls to get even more data if needed. We use the options to do a tag search for ’sunset’, a lat/lon, the maximum allowed radius of 32 kilometers, and a few other options. We were able to get a lot out of the <code>extras</code> field. It will give you the direct photo URL on the server so you don’t have to construct the URL from the other data. When you upload to Flickr they store the photo in a bunch  of sizes and you can choose which one to use.**</p>

<h3>Showing a photo</h3>

<p>All this comes together when you load the page. We</p>

<ol>
<li>choose place at random from the list of where the sun is setting right now.</li>
<li>Collect a list of all the #sunset photos from there.</li>
<li>Show one of those at random to give as much variety as possible.</li>
</ol>


<p>We want to show a large full screen image so we use the 1600 pixel size  (The ‘h’ size as Flickr calls it.) and we only want landscape photos because, well, it’s a landscape. (It also makes the layout much less complicated.) The 1600 pixel image isn’t always available so the the last step is to check for that and that width > height and 1) Show a photo <em><a href="http://sunsetsomewhere.herokuapp.com/">&lsquo;Ooohh&rsquo;</a></em> or 2) Choose another at random <em><a href="http://sunsetsomewhere.herokuapp.com/">&lsquo;Ahhhh&rsquo;</a></em>&hellip;</p>

<p><a href='http://sunsetsomewhere.herokuapp.com/'><img src='https://farm4.staticflickr.com/3837/14809101826_7368f83888_b.jpg' ></a></p>

<p>** <strong>Note:</strong> There are more sizes available than <a href="https://www.flickr.com/services/api/misc.urls.html">the documentation currently shows</a>. You can see they have the n, c, z, etc sizes. These correspond to the sizes on a photo&rsquo;s &lsquo;all sizes&rsquo; page. <a href="https://www.flickr.com/photos/nirjadalal/5982367364/sizes/l">Some photos</a> only have the ones you see on the docs. But a lot of photos that were <a href="https://www.flickr.com/photos/stuckinthemetal/14799254526/sizes/l">uploaded within the last few years</a> have additional sizes. These are ‘h’ at 1600 on the longest side and ‘k’ at 2048 on the longest side. The API docs for the extras field say you can get the URL for some sizes with the notation <code>url_n, url_z, url_c,</code> etc. Even though they don’t mention h &amp; k they are also available. With that we were able to get a 1600px image for the app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Familiar With IRC]]></title>
    <link href="http://io.zack.io/blog/2014/07/21/getting-familiar-with-irc/"/>
    <updated>2014-07-21T09:24:49-04:00</updated>
    <id>http://io.zack.io/blog/2014/07/21/getting-familiar-with-irc</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve tried to figure out why many of the engineers I know still use IRC even though it&rsquo;s such old technology. I&rsquo;ve tried it but don&rsquo;t totally understand it. Since I&rsquo;m learning to code, it&rsquo;s time to also learn IRC.</p>

<p>IRC stands for Internet Relay Chat. You can read the <a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat">Wikipedia definition</a>, but that really doesn&rsquo;t tell you much about why or how people use it in world that also has IM clients, Twitter, SMS, iMessage, and all the other ways that we have today to connect. Honestly I don&rsquo;t totally know why either but it&rsquo;s time to dive in and find out! I asked on Twitter if it&rsquo;s still something people find useful,</p>

<p><a href="https://twitter.com/zackshp/status/490915646339702785" ><img src="https://farm4.staticflickr.com/3901/14705008201_0677b4e770_o.jpg" width="571" height="259" alt="Screen_Shot_2014-07-21_at_8_48_27_AM"></a></p>

<p>and the general consensus seems to be <a href="https://twitter.com/zackshp/status/490915646339702785">yes</a>.</p>

<p>Since I&rsquo;m learning Ruby, the example channel I&rsquo;ll join is the <code>#ruby-lang</code> room on freenode.net. Here&rsquo;s the address:
<code>irc://irc.freenode.net/ruby-lang</code></p>

<p>But how do I actually use that? And after I&rsquo;m in there what is ok, and what is verboten?</p>

<h3>Reading the address</h3>

<ul>
<li><code>irc://</code> denotes that it&rsquo;s an IRC connection as opposed to the http that you see when getting a web page.</li>
<li><code>irc.freenode.net</code> is the server, as you&rsquo;d guess.</li>
<li><code>ruby-lang</code> is the specific room or &lsquo;channel&rsquo; that you are joining as it&rsquo;s called in IRC.</li>
</ul>


<h3>IRC Clients</h3>

<p>There are lots of options. Dedicated clients like <a href="http://colloquy.info/">Colloquy</a> and <a href="http://limechat.net/">Limechat</a>, <a href="http://www.irssi.org/">irssi</a> on the command line, and it&rsquo;s also possible to use IRC inside of other chat clients like <a href="https://adium.im/">Adium</a>. For even more simplicity there are browser extensions for Chrome and Firefox that will let you IRC in your browser. irssi is good but it can be hard to install. If you just want to get up and running Adium is a good choice because you can also use it with so many other chat services.</p>

<h3>Joining a room</h3>

<p>For this example we&rsquo;ll join the <code>##new2ruby</code> channel that is good and active as of this writing.<br/>
(After you&rsquo;ve logged in use the &ldquo;Registering on the IRC server&rdquo; instructions below to create a permanent account on the server.)</p>

<h4>On Adium</h4>

<ol>
<li>Download <a href="https://adium.im/">Adium</a> if you don&rsquo;t already have it</li>
<li>File > Add Account > IRC</li>
<li>Nickname: Enter your name on the server</li>
<li>Hostname: irc.freenode.net</li>
<li>Click &lsquo;Options&rsquo;</li>
<li>Here you will enter any rooms you want to join automatically
<code>/join ##new2ruby</code></li>
<li>Ok</li>
</ol>


<h4>On Colloquy</h4>

<ol>
<li>After opening Colloquy click &lsquo;Connect&rsquo;</li>
<li>Enter irc.freenode.net as the Chat Server and Connect</li>
<li>Before joining the ##new2ruby room we might as well look around to see what else is happening on the server. Click the down arrow to see a list of all the rooms. After you&rsquo;re connected click &lsquo;Join Room&rsquo;.  I&rsquo;m going to join a couple rooms to see how conversations work.</li>
</ol>


<p>That&rsquo;s it! You can see what people are talking about and participate as well. Rooms often have a code of conduct or set of rules that you will see open entering the channel or in the topic at the top of the room. It&rsquo;s always a good idea to read these to understand the comunity that you are participating in.</p>

<p>Next up, what are the commands.</p>

<h3>Commands</h3>

<p>This is the part I&rsquo;ve always been confused about. You enter IRC commands in the same place that you post messages except that instead of just entering &ldquo;Hi there&rdquo; you begin the line with a slash and type the command with it&rsquo;s arguments. Beginning the message with a slash indicates that it is a command and it will not be sent to the room. If it is a <code>/msg</code> command it will be sent to the person you&rsquo;re messaging. Common commands are:</p>

<ul>
<li><code>/help</code> will usually give you a list of command options</li>
<li><code>/msg &lt;nick&gt; (message)</code> to start a private chat with someone in the room. Ex. &lsquo;/msg barry345 Hi Barry how&rsquo;s Lavon?&rsquo;</li>
<li><code>/ignore &lt;nick&gt;</code> &ndash; ignore the person with that nick in all rooms on the server. They will not be able to /msg you.</li>
<li><code>/whois &lt;nick&gt;</code> Opens an info window for nick.</li>
<li><code>/away</code> lets you set your status to away.</li>
<li><code>/topic</code> Channels will often have a message at the top of the room called the topic. This command lets you reset that.</li>
</ul>


<h3>Registering on the IRC server</h3>

<p>You don&rsquo;t have to register with a password on most IRC servers. If you don&rsquo;t you can just login with a nickname temporarily. But to be a part of the community I think you need a regular account that is yours and which people can recognise you by so it&rsquo;s time to register.</p>

<p>One of the things that always seemed weird to me about IRC is that to register, change my password or anything about my account I have to enter my password in the same place I send messages to the group. So I wanted to make sure I know what I&rsquo;m doing before I accidentally send my password to 300+ people. To prevent the possibility of this we&rsquo;ll open up a chat with the NickServ bot that manages accounts first. This way even if something does go wrong it won&rsquo;t be sent to everyone. In the message input enter,</p>

<ol>
<li><code>/msg NickServ</code> This should open a private chat with the bot.</li>
<li>In the private chat enter <code>/msg NickServ REGISTER password me@me.com</code> where password and email are your password and email.</li>
</ol>


<p><img src="https://farm4.staticflickr.com/3843/14708041015_32a686c1eb_o.jpg" alt="NicServ msg" /></p>

<p>This is messaging the Nickname Server bot directly, telling it that you want to REGISTER using the password and email provided.  After registering you can also enter the command <code>/msg NickServ SET ENFORCE ON</code> to make sure no one can use your nick unless they login.</p>

<h3>Starting a channel on the Freenode IRC server</h3>

<p>Since this is a way to chat with people. Having a list of commands is nice it&rsquo;s just not the same as actually using it. If you&rsquo;d like to try setting up your own room to try it with a few friends on Freenode. Freenode is mainly a network for people involved in open source software but there are also some random rooms.  To get started, open a message session with the ChanServ bot by typing <code>/msg ChanServ</code> Now that you&rsquo;re messaging the bot directly follow <a href="https://botbot.me/how-to-setup-irc-channel/">these instructions from BotBot.me</a>. The BotBot instructions are about how to setup an invite only room which requires people to register. Really I&rsquo;d like people to be able to try it with me with a low barrier to entry so I&rsquo;m going to skip that step. I created the channel and set it up using these commands:</p>

<ol>
<li><code>/join ##your-room-name</code></li>
<li><code>/msg ChanServ REGISTER ##your-room-name</code></li>
<li><code>/msg ChanServ SET ##your-room-name GUARD ON</code></li>
<li><code>/msg Chanserv SET ##your-room-name MLOCK +s</code></li>
</ol>


<p>And now you&rsquo;re setup!</p>

<p>If you want the channel password protected you can optinally also send the command <code>/msg ChanServ set ##your-room-name mlock +k password</code>
<img src="https://farm6.staticflickr.com/5579/14521361100_bd4a4c795f_b.jpg" alt="channel setup" /></p>

<p>Now that the room is setup you can invite people to it by giving them the address: <code>irc://irc.freenode.net/your-room-name</code> Try changing the topic, /msg, /query, maybe even /ignore to see what it looks like, and lots of other fun.</p>

<p>To make the barrier to entry as low as possible, someone can even try it with just an IRC Chrome or Firefox extension. A friend could join in 3 steps by</p>

<ol>
<li>Installing <a href="https://chrome.google.com/webstore/detail/circ/bebigdkelppomhhjaaianniiifjbgocn?hl=en-US&amp;_ind=category%252Fapps%253Fhl%253Den-US&amp;_asi=1&amp;source=5">CIRC</a> in Chrome.</li>
<li>After opening the extension connect to freenod with this command, <code>/server irc.freenode.net</code></li>
<li>Then join the room with the password by entering: <code>/join ##your-room-name password</code></li>
</ol>


<h4>Even easier channel setup</h4>

<p>There are a few companies out there that basically let you embed an IRC chatroom in a webpage. <a href="https://kiwiirc.com/">Kiwiirc</a> is one of them that will let you do this for free. From their embed page you can get a link that will open IRC in the browser, or even get embed code to let you just embed an IRC chatroom on your own site. They have an interesting note about using it with projects &ldquo;<em>You can now link your GitHub project to your own IRC channel (or create one on freenode!) by embedding a button within your readme.md file. This can be generated using the form to the right and selecting the GitHub logo.</em>&rdquo;</p>

<h3>Speaking of bots</h3>

<p>If you start playing with it, one of the really fun and powerful things about IRC is the abity to have bots that report on things or reply to comments automatically. People have been writing IRC bots for years so there are lots to choose from that do everything from report site errors to post gifs.</p>

<p>If you want to try building a IRC bot there is a Ruby framework called <a href="http://www.rubyinside.com/cinch-a-ruby-irc-bot-building-framework-3223.html">Cinch</a> that I&rsquo;ll be trying in the near future.</p>

<p>There are a lot of modern alternatives to IRC that are less querky and easier to understand (<a href="http://slack.com">Slack!</a>)  but it&rsquo;s still a technology worth having some familiarity with.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on My Beginner Dev Environment]]></title>
    <link href="http://io.zack.io/blog/2014/06/17/notes-on-my-beginner-dev-environment/"/>
    <updated>2014-06-17T21:08:15-04:00</updated>
    <id>http://io.zack.io/blog/2014/06/17/notes-on-my-beginner-dev-environment</id>
    <content type="html"><![CDATA[<p>This post is a quick list of some of the things I&rsquo;m doing to help me code and learn during my time at <a href="http://flatironschool.com/">The Flatiron School</a>. Shoutout to <a href="https://twitter.com/waferbaby">Dan Bogan</a> who runs <a href="http://usesthis.com/">The Setup</a>. I got the idea for the post from reading his site for years.</p>

<h3>.bash_profile</h3>

<p>I&rsquo;ve used Terminal quite a bit over the last few years, at times even to manipulate servers at companies I worked at. But I&rsquo;ve never felt very at home there both because it was unfamiliar and because it&rsquo;s confusing to know what was going on if you don&rsquo;t use it frequently.</p>

<p>I made some cosmetic changes to a make it feel more like mine and make it a place I&rsquo;m excited about hanging out in all day. I also made some functional changes that I think are better suited for someone that is just getting started programming. When first starting out learning to code there are so many little things you can get wrong. I wanted to minimize the possibility that it&rsquo;s not working because I&rsquo;m in the wrong folder or some other small thing about the parts around my code so I could focus on the code itself. The things I changed about the prompt (so far) are:</p>

<ul>
<li>I modified the command line into a 3 line format to have a single line across the top so I can easily find my place for those times when 12 screens of text go swooping by and you want to find where it started. This is small but again I think these small things that make you feel less lost are helpful when you&rsquo;re eyes aren&rsquo;t used to scanning all that text.</li>
<li>Print out the full path so I always know where I&rsquo;m at in the file system. This was important for me especially while I&rsquo;m getting used to the command line because I didn&rsquo;t have the skill to just keep where I am in the file system in my head. It&rsquo;s getting easier already though and I might not need this much longer.</li>
<li>Because the directory can get long I have the prompt on it&rsquo;s own line which is actually really nice and clean. It&rsquo;s also great for copy/pasting commands.</li>
<li>In addition to showing the git branch I also made it so the branch name is red if it&rsquo;s dirty and green if it&rsquo;s clean to remind me to commit often. (link to )
<img src="https://farm6.staticflickr.com/5497/14261841518_9ba0b709cf_b.jpg" alt="git-color" /></li>
<li>After a couple weeks I added a calm emoji bear on that hangs out on the right. It&rsquo;s a small thing but I think these small things that are a little fun to make this new environment are really great and helpful to make the termainal more cozy. If you&rsquo;re a 7th level blackbelt DB admin you might only need <code>$</code> but I am happy to have my cozy little prompt.</li>
</ul>


<h4>I also made these other small changes to .bash_profile</h4>

<ul>
<li>A few aliases to directories I use a lot like <code>flat3</code> (for my flatiron/week3 directory), <code>flat4</code>, etc.
<img src="https://farm4.staticflickr.com/3894/14261960917_49d414b698_b.jpg" alt="flat3" /></li>
<li>A <a href="http://brettterpstra.com/2014/05/10/bash-and-dash/">function</a> to pull up documentation via <a href="http://kapeli.com/dash">dash</a> from the command line (Which I finally bought, it was totally worth it.)</li>
</ul>


<p>Lastly I increased the font to 16pt and installed the excellent <a href="http://ethanschoonover.com/solarized">Solarized</a> color scheme on Terminal and Sublime Text. The colors are cozy, I can look at them all day, and because there is less contrast between the colors they reduce eye strain.</p>

<h3>Notes</h3>

<p>Evernote is my go to for notes of all kinds. I can make notes and they are available wherever I go including on my commute. If you use it with the Chrome clipper extension you can clip entire pages (like the method documentation, hint hint!) and read them anywhere. I use 2 folders &ldquo;Flatiron Notes&rdquo; &amp; &ldquo;Flatiron Reading&rdquo;</p>

<p>Evernote isn&rsquo;t great for code though so I&rsquo;m also experimenting with adding a lessons_learned.md to my assignments. I&rsquo;ve been trying to do a recap instead of just going on to the next thing so for the last couple assignments after I save and push to git I rewind the changes with Cmd+Z, then go forward through them using Shift+Cmd+Z. At each point where i remember making a break through i copy that, and make a note about what i was thinking and what i learned. This isn&rsquo;t optimal, if you change somethig you can no longer Shift+Cmd+Z forward and have to restore from master. I might start adding the file to my .gitignore since I get all deep sometimes and it might be weird to let people see me talk to myself.</p>

<h3>Email</h3>

<p>Lastly becuase the deluge of Github emails is overwhelming when you first start using it I have a few filters that put some things in the Inbox and some right in a Github folder. I&rsquo;m not sure all of them are really exactly right yet but the one that saves the most Inbox space is, if it says &ldquo;[GitHub] Subscribed to&rdquo; in the subject line it goes right to the Github folder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://io.zack.io/blog/2014/06/11/my-first-post-on-octopress/"/>
    <updated>2014-06-11T07:15:22-04:00</updated>
    <id>http://io.zack.io/blog/2014/06/11/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Hello World</p>
]]></content>
  </entry>
  
</feed>
